{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\delll\\\\Desktop\\\\mini\\\\src\\\\connect.js\",\n  _s = $RefreshSig$();\nimport React, { useMemo } from 'react';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport { PhantomWalletAdapter, UnsafeBurnerWalletAdapter } from '@solana/wallet-adapter-wallets';\nimport { WalletModalProvider, WalletDisconnectButton, WalletMultiButton } from '@solana/wallet-adapter-react-ui';\nimport { clusterApiUrl, Connection } from '@solana/web3.js';\n\n// Default styles that can be overridden by your app\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nrequire('@solana/wallet-adapter-react-ui/styles.css');\nconst Wallet = ({\n  children\n}) => {\n  _s();\n  // The network can be set to 'devnet', 'testnet', or 'mainnet-beta'.\n  const network = WalletAdapterNetwork.Testnet;\n\n  // You can also provide a custom RPC endpoint.\n  const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n  const wallets = useMemo(() => [new PhantomWalletAdapter(), new UnsafeBurnerWalletAdapter()], [network]);\n  return /*#__PURE__*/_jsxDEV(ConnectionProvider, {\n    endpoint: endpoint,\n    children: /*#__PURE__*/_jsxDEV(WalletProvider, {\n      wallets: wallets,\n      autoConnect: true,\n      children: /*#__PURE__*/_jsxDEV(WalletModalProvider, {\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(Wallet, \"RNaTq20PjYTGasfEtgZ8qKkPMD0=\");\n_c = Wallet;\nexport default Wallet;\n// import React, { useMemo, ReactNode } from 'react';\n// import { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\n// import { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\n// import { PhantomWalletAdapter, UnsafeBurnerWalletAdapter } from '@solana/wallet-adapter-wallets';\n// import {\n//     WalletModalProvider,\n//     // WalletDisconnectButton,\n//     // WalletMultiButton\n// } from '@solana/wallet-adapter-react-ui';\n// import { clusterApiUrl } from '@solana/web3.js';\n\n// // Default styles that can be overridden by your app\n// require('@solana/wallet-adapter-react-ui/styles.css');\n\n// interface WalletProps {\n//     children: ReactNode;\n// }\n\n// const Wallet: React.FC<WalletProps> = ({ children }) => {\n//     // The network can be set to 'devnet', 'testnet', or 'mainnet-beta'.\n//     const network: WalletAdapterNetwork = WalletAdapterNetwork.Testnet;\n\n//     // You can also provide a custom RPC endpoint.\n//     const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n\n//     const wallets = useMemo(\n//         () => [\n//             new PhantomWalletAdapter(),\n//             new UnsafeBurnerWalletAdapter(),\n//         ],\n//         [network]\n//     );\n\n//     return (\n//         <ConnectionProvider endpoint={endpoint}>\n//             <WalletProvider wallets={wallets} autoConnect>\n//                 <WalletModalProvider>\n//                     {/* <WalletMultiButton /> */}\n//                     {/* <WalletDisconnectButton /> */}\n//                     {children}\n//                 </WalletModalProvider>\n//             </WalletProvider>\n//         </ConnectionProvider>\n//     );\n// };\n\n// export default Wallet;\nvar _c;\n$RefreshReg$(_c, \"Wallet\");","map":{"version":3,"names":["React","useMemo","ConnectionProvider","WalletProvider","WalletAdapterNetwork","PhantomWalletAdapter","UnsafeBurnerWalletAdapter","WalletModalProvider","WalletDisconnectButton","WalletMultiButton","clusterApiUrl","Connection","jsxDEV","_jsxDEV","require","Wallet","children","_s","network","Testnet","endpoint","wallets","autoConnect","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/delll/Desktop/mini/src/connect.js"],"sourcesContent":["import React, { useMemo } from 'react';\r\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\r\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\r\nimport { PhantomWalletAdapter, UnsafeBurnerWalletAdapter } from '@solana/wallet-adapter-wallets';\r\nimport {\r\n    WalletModalProvider,\r\n    WalletDisconnectButton,\r\n    WalletMultiButton\r\n} from '@solana/wallet-adapter-react-ui';\r\nimport { clusterApiUrl ,Connection} from '@solana/web3.js';\r\n\r\n// Default styles that can be overridden by your app\r\nrequire('@solana/wallet-adapter-react-ui/styles.css');\r\n\r\n\r\n\r\nconst Wallet = ({ children }) => {\r\n    // The network can be set to 'devnet', 'testnet', or 'mainnet-beta'.\r\n    const network = WalletAdapterNetwork.Testnet;\r\n\r\n    // You can also provide a custom RPC endpoint.\r\n    const endpoint = useMemo(() => clusterApiUrl(network), [network]);\r\n\r\n    const wallets = useMemo(\r\n        () => [\r\n\r\n            new PhantomWalletAdapter(),\r\n            new UnsafeBurnerWalletAdapter(),\r\n        ],\r\n        [network]\r\n    );\r\n\r\n    return (\r\n        <ConnectionProvider endpoint={endpoint}>\r\n            <WalletProvider wallets={wallets} autoConnect >\r\n                <WalletModalProvider>\r\n                    {/* <WalletMultiButton /> */}\r\n                    {/* <WalletDisconnectButton /> */}\r\n                    {children}\r\n                </WalletModalProvider>\r\n            </WalletProvider>\r\n        </ConnectionProvider>\r\n    );\r\n};\r\n\r\nexport default Wallet;\r\n// import React, { useMemo, ReactNode } from 'react';\r\n// import { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\r\n// import { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\r\n// import { PhantomWalletAdapter, UnsafeBurnerWalletAdapter } from '@solana/wallet-adapter-wallets';\r\n// import {\r\n//     WalletModalProvider,\r\n//     // WalletDisconnectButton,\r\n//     // WalletMultiButton\r\n// } from '@solana/wallet-adapter-react-ui';\r\n// import { clusterApiUrl } from '@solana/web3.js';\r\n\r\n// // Default styles that can be overridden by your app\r\n// require('@solana/wallet-adapter-react-ui/styles.css');\r\n\r\n// interface WalletProps {\r\n//     children: ReactNode;\r\n// }\r\n\r\n// const Wallet: React.FC<WalletProps> = ({ children }) => {\r\n//     // The network can be set to 'devnet', 'testnet', or 'mainnet-beta'.\r\n//     const network: WalletAdapterNetwork = WalletAdapterNetwork.Testnet;\r\n\r\n//     // You can also provide a custom RPC endpoint.\r\n//     const endpoint = useMemo(() => clusterApiUrl(network), [network]);\r\n\r\n//     const wallets = useMemo(\r\n//         () => [\r\n//             new PhantomWalletAdapter(),\r\n//             new UnsafeBurnerWalletAdapter(),\r\n//         ],\r\n//         [network]\r\n//     );\r\n\r\n//     return (\r\n//         <ConnectionProvider endpoint={endpoint}>\r\n//             <WalletProvider wallets={wallets} autoConnect>\r\n//                 <WalletModalProvider>\r\n//                     {/* <WalletMultiButton /> */}\r\n//                     {/* <WalletDisconnectButton /> */}\r\n//                     {children}\r\n//                 </WalletModalProvider>\r\n//             </WalletProvider>\r\n//         </ConnectionProvider>\r\n//     );\r\n// };\r\n\r\n// export default Wallet;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,OAAO,QAAQ,OAAO;AACtC,SAASC,kBAAkB,EAAEC,cAAc,QAAQ,8BAA8B;AACjF,SAASC,oBAAoB,QAAQ,6BAA6B;AAClE,SAASC,oBAAoB,EAAEC,yBAAyB,QAAQ,gCAAgC;AAChG,SACIC,mBAAmB,EACnBC,sBAAsB,EACtBC,iBAAiB,QACd,iCAAiC;AACxC,SAASC,aAAa,EAAEC,UAAU,QAAO,iBAAiB;;AAE1D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAC,OAAO,CAAC,4CAA4C,CAAC;AAIrD,MAAMC,MAAM,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7B;EACA,MAAMC,OAAO,GAAGd,oBAAoB,CAACe,OAAO;;EAE5C;EACA,MAAMC,QAAQ,GAAGnB,OAAO,CAAC,MAAMS,aAAa,CAACQ,OAAO,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EAEjE,MAAMG,OAAO,GAAGpB,OAAO,CACnB,MAAM,CAEF,IAAII,oBAAoB,CAAC,CAAC,EAC1B,IAAIC,yBAAyB,CAAC,CAAC,CAClC,EACD,CAACY,OAAO,CACZ,CAAC;EAED,oBACIL,OAAA,CAACX,kBAAkB;IAACkB,QAAQ,EAAEA,QAAS;IAAAJ,QAAA,eACnCH,OAAA,CAACV,cAAc;MAACkB,OAAO,EAAEA,OAAQ;MAACC,WAAW;MAAAN,QAAA,eACzCH,OAAA,CAACN,mBAAmB;QAAAS,QAAA,EAGfA;MAAQ;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE7B,CAAC;AAACT,EAAA,CA3BIF,MAAM;AAAAY,EAAA,GAANZ,MAAM;AA6BZ,eAAeA,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}