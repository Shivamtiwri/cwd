{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst tslib_1 = require(\"tslib\");\nconst events_1 = tslib_1.__importDefault(require(\"events\"));\nconst ERRORS = tslib_1.__importStar(require(\"@trezor/connect/lib/constants/errors\"));\nconst events_2 = require(\"@trezor/connect/lib/events\");\nconst factory_1 = require(\"@trezor/connect/lib/factory\");\nconst debug_1 = require(\"@trezor/connect/lib/utils/debug\");\nconst config_1 = require(\"@trezor/connect/lib/data/config\");\nconst utils_1 = require(\"@trezor/utils\");\nconst iframe = tslib_1.__importStar(require(\"./iframe\"));\nconst popup = tslib_1.__importStar(require(\"./popup\"));\nconst button_1 = tslib_1.__importDefault(require(\"./webusb/button\"));\nconst connectSettings_1 = require(\"./connectSettings\");\nconst eventEmitter = new events_1.default();\nconst _log = (0, debug_1.initLog)('@trezor/connect-web');\nlet _settings = (0, connectSettings_1.parseConnectSettings)();\nlet _popupManager;\nconst messagePromises = (0, utils_1.createDeferredManager)({\n  initialId: 1\n});\nconst initPopupManager = () => {\n  const pm = new popup.PopupManager(_settings, {\n    logger: _log\n  });\n  pm.on(events_2.POPUP.CLOSED, error => {\n    iframe.postMessage({\n      type: events_2.POPUP.CLOSED,\n      payload: error ? {\n        error\n      } : null\n    });\n  });\n  return pm;\n};\nconst manifest = data => {\n  _settings = (0, connectSettings_1.parseConnectSettings)(Object.assign(Object.assign({}, _settings), {\n    manifest: data\n  }));\n};\nconst dispose = () => {\n  eventEmitter.removeAllListeners();\n  iframe.dispose();\n  _settings = (0, connectSettings_1.parseConnectSettings)();\n  if (_popupManager) {\n    _popupManager.close();\n  }\n  return Promise.resolve(undefined);\n};\nconst cancel = error => {\n  if (_popupManager) {\n    _popupManager.emit(events_2.POPUP.CLOSED, error);\n  }\n};\nconst handleMessage = messageEvent => {\n  if (messageEvent.origin !== iframe.origin) return;\n  const message = (0, events_2.parseMessage)(messageEvent.data);\n  _log.log('handleMessage', message);\n  switch (message.event) {\n    case events_2.RESPONSE_EVENT:\n      {\n        const {\n          id = 0,\n          success,\n          payload\n        } = message;\n        const resolved = messagePromises.resolve(id, {\n          id,\n          success,\n          payload\n        });\n        if (!resolved) _log.warn(`Unknown message id ${id}`);\n        break;\n      }\n    case events_2.DEVICE_EVENT:\n      eventEmitter.emit(message.event, message);\n      eventEmitter.emit(message.type, message.payload);\n      break;\n    case events_2.TRANSPORT_EVENT:\n      eventEmitter.emit(message.event, message);\n      eventEmitter.emit(message.type, message.payload);\n      break;\n    case events_2.BLOCKCHAIN_EVENT:\n      eventEmitter.emit(message.event, message);\n      eventEmitter.emit(message.type, message.payload);\n      break;\n    case events_2.UI_EVENT:\n      if (message.type === events_2.IFRAME.BOOTSTRAP) {\n        iframe.clearTimeout();\n        break;\n      }\n      if (message.type === events_2.IFRAME.LOADED) {\n        iframe.initPromise.resolve();\n      }\n      if (message.type === events_2.IFRAME.ERROR) {\n        iframe.initPromise.reject(message.payload.error);\n      }\n      eventEmitter.emit(message.event, message);\n      eventEmitter.emit(message.type, message.payload);\n      break;\n    default:\n      _log.log('Undefined message', messageEvent.data);\n  }\n};\nconst init = async (settings = {}) => {\n  var _a;\n  if (iframe.instance) {\n    throw ERRORS.TypedError('Init_AlreadyInitialized');\n  }\n  _settings = (0, connectSettings_1.parseConnectSettings)(Object.assign(Object.assign({}, _settings), settings));\n  if (!_settings.manifest) {\n    throw ERRORS.TypedError('Init_ManifestMissing');\n  }\n  if (!((_a = _settings.transports) === null || _a === void 0 ? void 0 : _a.length)) {\n    _settings.transports = ['BridgeTransport', 'WebUsbTransport'];\n  }\n  if (_settings.lazyLoad) {\n    _settings.lazyLoad = false;\n    return;\n  }\n  if (!_popupManager) {\n    _popupManager = initPopupManager();\n  }\n  _log.enabled = !!_settings.debug;\n  window.addEventListener('message', handleMessage);\n  window.addEventListener('unload', dispose);\n  await iframe.init(_settings);\n  if (_settings.sharedLogger !== false) {\n    iframe.initIframeLogger();\n  }\n};\nconst call = async params => {\n  if (!iframe.instance && !iframe.timeout) {\n    _settings = (0, connectSettings_1.parseConnectSettings)(_settings);\n    if (!_settings.manifest) {\n      return (0, events_2.createErrorMessage)(ERRORS.TypedError('Init_ManifestMissing'));\n    }\n    if (!_popupManager) {\n      _popupManager = initPopupManager();\n    }\n    _popupManager.request();\n    try {\n      await init(_settings);\n    } catch (error) {\n      if (_popupManager) {\n        if (['Init_IframeBlocked', 'Init_IframeTimeout'].includes(error.code)) {\n          _popupManager.postMessage((0, events_2.createUiMessage)(events_2.UI.IFRAME_FAILURE));\n        } else {\n          _popupManager.clear();\n        }\n      }\n      return (0, events_2.createErrorMessage)(error);\n    }\n  }\n  if (iframe.timeout) {\n    return (0, events_2.createErrorMessage)(ERRORS.TypedError('Init_ManifestMissing'));\n  }\n  if (iframe.error) {\n    return (0, events_2.createErrorMessage)(iframe.error);\n  }\n  if (_settings.popup && _popupManager) {\n    _popupManager.request();\n  }\n  try {\n    const {\n      promiseId,\n      promise\n    } = messagePromises.create();\n    iframe.postMessage({\n      id: promiseId,\n      type: events_2.IFRAME.CALL,\n      payload: params\n    });\n    const response = await promise;\n    if (response) {\n      if (!response.success && response.payload.code !== 'Device_CallInProgress' && _popupManager) {\n        _popupManager.unlock();\n      }\n      return response;\n    }\n    if (_popupManager) {\n      _popupManager.unlock();\n    }\n    return (0, events_2.createErrorMessage)(ERRORS.TypedError('Method_NoResponse'));\n  } catch (error) {\n    _log.error('__call error', error);\n    if (_popupManager) {\n      _popupManager.clear(false);\n    }\n    return (0, events_2.createErrorMessage)(error);\n  }\n};\nconst uiResponse = response => {\n  if (!iframe.instance) {\n    throw ERRORS.TypedError('Init_NotInitialized');\n  }\n  iframe.postMessage(response);\n};\nconst renderWebUSBButton = className => {\n  (0, button_1.default)(className, _settings.webusbSrc);\n};\nconst requestLogin = async params => {\n  if (typeof params.callback === 'function') {\n    const {\n      callback\n    } = params;\n    const loginChallengeListener = async event => {\n      const {\n        data\n      } = event;\n      if (data && data.type === events_2.UI.LOGIN_CHALLENGE_REQUEST) {\n        try {\n          const payload = await callback();\n          iframe.postMessage({\n            type: events_2.UI.LOGIN_CHALLENGE_RESPONSE,\n            payload\n          });\n        } catch (error) {\n          iframe.postMessage({\n            type: events_2.UI.LOGIN_CHALLENGE_RESPONSE,\n            payload: error.message\n          });\n        }\n      }\n    };\n    window.addEventListener('message', loginChallengeListener, false);\n    const response = await call(Object.assign(Object.assign({\n      method: 'requestLogin'\n    }, params), {\n      asyncChallenge: true,\n      callback: null\n    }));\n    window.removeEventListener('message', loginChallengeListener);\n    return response;\n  }\n  return call(Object.assign({\n    method: 'requestLogin'\n  }, params));\n};\nconst disableWebUSB = () => {\n  if (!iframe.instance) {\n    throw ERRORS.TypedError('Init_NotInitialized');\n  }\n  iframe.postMessage({\n    type: events_2.TRANSPORT.DISABLE_WEBUSB\n  });\n};\nconst requestWebUSBDevice = async () => {\n  try {\n    await window.navigator.usb.requestDevice({\n      filters: config_1.config.webusb\n    });\n    iframe.postMessage({\n      type: events_2.TRANSPORT.REQUEST_DEVICE\n    });\n  } catch (_err) {}\n};\nconst TrezorConnect = (0, factory_1.factory)({\n  eventEmitter,\n  manifest,\n  init,\n  call,\n  requestLogin,\n  uiResponse,\n  renderWebUSBButton,\n  disableWebUSB,\n  requestWebUSBDevice,\n  cancel,\n  dispose\n});\nexports.default = TrezorConnect;\ntslib_1.__exportStar(require(\"@trezor/connect/lib/exports\"), exports);","map":{"version":3,"names":["Object","defineProperty","exports","value","tslib_1","require","events_1","__importDefault","ERRORS","__importStar","events_2","factory_1","debug_1","config_1","utils_1","iframe","popup","button_1","connectSettings_1","eventEmitter","default","_log","initLog","_settings","parseConnectSettings","_popupManager","messagePromises","createDeferredManager","initialId","initPopupManager","pm","PopupManager","logger","on","POPUP","CLOSED","error","postMessage","type","payload","manifest","data","assign","dispose","removeAllListeners","close","Promise","resolve","undefined","cancel","emit","handleMessage","messageEvent","origin","message","parseMessage","log","event","RESPONSE_EVENT","id","success","resolved","warn","DEVICE_EVENT","TRANSPORT_EVENT","BLOCKCHAIN_EVENT","UI_EVENT","IFRAME","BOOTSTRAP","clearTimeout","LOADED","initPromise","ERROR","reject","init","settings","_a","instance","TypedError","transports","length","lazyLoad","enabled","debug","window","addEventListener","sharedLogger","initIframeLogger","call","params","timeout","createErrorMessage","request","includes","code","createUiMessage","UI","IFRAME_FAILURE","clear","promiseId","promise","create","CALL","response","unlock","uiResponse","renderWebUSBButton","className","webusbSrc","requestLogin","callback","loginChallengeListener","LOGIN_CHALLENGE_REQUEST","LOGIN_CHALLENGE_RESPONSE","method","asyncChallenge","removeEventListener","disableWebUSB","TRANSPORT","DISABLE_WEBUSB","requestWebUSBDevice","navigator","usb","requestDevice","filters","config","webusb","REQUEST_DEVICE","_err","TrezorConnect","factory","__exportStar"],"sources":["C:/Users/delll/Desktop/mini/node_modules/@trezor/connect-web/lib/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst events_1 = tslib_1.__importDefault(require(\"events\"));\nconst ERRORS = tslib_1.__importStar(require(\"@trezor/connect/lib/constants/errors\"));\nconst events_2 = require(\"@trezor/connect/lib/events\");\nconst factory_1 = require(\"@trezor/connect/lib/factory\");\nconst debug_1 = require(\"@trezor/connect/lib/utils/debug\");\nconst config_1 = require(\"@trezor/connect/lib/data/config\");\nconst utils_1 = require(\"@trezor/utils\");\nconst iframe = tslib_1.__importStar(require(\"./iframe\"));\nconst popup = tslib_1.__importStar(require(\"./popup\"));\nconst button_1 = tslib_1.__importDefault(require(\"./webusb/button\"));\nconst connectSettings_1 = require(\"./connectSettings\");\nconst eventEmitter = new events_1.default();\nconst _log = (0, debug_1.initLog)('@trezor/connect-web');\nlet _settings = (0, connectSettings_1.parseConnectSettings)();\nlet _popupManager;\nconst messagePromises = (0, utils_1.createDeferredManager)({ initialId: 1 });\nconst initPopupManager = () => {\n    const pm = new popup.PopupManager(_settings, { logger: _log });\n    pm.on(events_2.POPUP.CLOSED, (error) => {\n        iframe.postMessage({\n            type: events_2.POPUP.CLOSED,\n            payload: error ? { error } : null,\n        });\n    });\n    return pm;\n};\nconst manifest = (data) => {\n    _settings = (0, connectSettings_1.parseConnectSettings)(Object.assign(Object.assign({}, _settings), { manifest: data }));\n};\nconst dispose = () => {\n    eventEmitter.removeAllListeners();\n    iframe.dispose();\n    _settings = (0, connectSettings_1.parseConnectSettings)();\n    if (_popupManager) {\n        _popupManager.close();\n    }\n    return Promise.resolve(undefined);\n};\nconst cancel = (error) => {\n    if (_popupManager) {\n        _popupManager.emit(events_2.POPUP.CLOSED, error);\n    }\n};\nconst handleMessage = (messageEvent) => {\n    if (messageEvent.origin !== iframe.origin)\n        return;\n    const message = (0, events_2.parseMessage)(messageEvent.data);\n    _log.log('handleMessage', message);\n    switch (message.event) {\n        case events_2.RESPONSE_EVENT: {\n            const { id = 0, success, payload } = message;\n            const resolved = messagePromises.resolve(id, { id, success, payload });\n            if (!resolved)\n                _log.warn(`Unknown message id ${id}`);\n            break;\n        }\n        case events_2.DEVICE_EVENT:\n            eventEmitter.emit(message.event, message);\n            eventEmitter.emit(message.type, message.payload);\n            break;\n        case events_2.TRANSPORT_EVENT:\n            eventEmitter.emit(message.event, message);\n            eventEmitter.emit(message.type, message.payload);\n            break;\n        case events_2.BLOCKCHAIN_EVENT:\n            eventEmitter.emit(message.event, message);\n            eventEmitter.emit(message.type, message.payload);\n            break;\n        case events_2.UI_EVENT:\n            if (message.type === events_2.IFRAME.BOOTSTRAP) {\n                iframe.clearTimeout();\n                break;\n            }\n            if (message.type === events_2.IFRAME.LOADED) {\n                iframe.initPromise.resolve();\n            }\n            if (message.type === events_2.IFRAME.ERROR) {\n                iframe.initPromise.reject(message.payload.error);\n            }\n            eventEmitter.emit(message.event, message);\n            eventEmitter.emit(message.type, message.payload);\n            break;\n        default:\n            _log.log('Undefined message', messageEvent.data);\n    }\n};\nconst init = async (settings = {}) => {\n    var _a;\n    if (iframe.instance) {\n        throw ERRORS.TypedError('Init_AlreadyInitialized');\n    }\n    _settings = (0, connectSettings_1.parseConnectSettings)(Object.assign(Object.assign({}, _settings), settings));\n    if (!_settings.manifest) {\n        throw ERRORS.TypedError('Init_ManifestMissing');\n    }\n    if (!((_a = _settings.transports) === null || _a === void 0 ? void 0 : _a.length)) {\n        _settings.transports = ['BridgeTransport', 'WebUsbTransport'];\n    }\n    if (_settings.lazyLoad) {\n        _settings.lazyLoad = false;\n        return;\n    }\n    if (!_popupManager) {\n        _popupManager = initPopupManager();\n    }\n    _log.enabled = !!_settings.debug;\n    window.addEventListener('message', handleMessage);\n    window.addEventListener('unload', dispose);\n    await iframe.init(_settings);\n    if (_settings.sharedLogger !== false) {\n        iframe.initIframeLogger();\n    }\n};\nconst call = async (params) => {\n    if (!iframe.instance && !iframe.timeout) {\n        _settings = (0, connectSettings_1.parseConnectSettings)(_settings);\n        if (!_settings.manifest) {\n            return (0, events_2.createErrorMessage)(ERRORS.TypedError('Init_ManifestMissing'));\n        }\n        if (!_popupManager) {\n            _popupManager = initPopupManager();\n        }\n        _popupManager.request();\n        try {\n            await init(_settings);\n        }\n        catch (error) {\n            if (_popupManager) {\n                if (['Init_IframeBlocked', 'Init_IframeTimeout'].includes(error.code)) {\n                    _popupManager.postMessage((0, events_2.createUiMessage)(events_2.UI.IFRAME_FAILURE));\n                }\n                else {\n                    _popupManager.clear();\n                }\n            }\n            return (0, events_2.createErrorMessage)(error);\n        }\n    }\n    if (iframe.timeout) {\n        return (0, events_2.createErrorMessage)(ERRORS.TypedError('Init_ManifestMissing'));\n    }\n    if (iframe.error) {\n        return (0, events_2.createErrorMessage)(iframe.error);\n    }\n    if (_settings.popup && _popupManager) {\n        _popupManager.request();\n    }\n    try {\n        const { promiseId, promise } = messagePromises.create();\n        iframe.postMessage({ id: promiseId, type: events_2.IFRAME.CALL, payload: params });\n        const response = await promise;\n        if (response) {\n            if (!response.success &&\n                response.payload.code !== 'Device_CallInProgress' &&\n                _popupManager) {\n                _popupManager.unlock();\n            }\n            return response;\n        }\n        if (_popupManager) {\n            _popupManager.unlock();\n        }\n        return (0, events_2.createErrorMessage)(ERRORS.TypedError('Method_NoResponse'));\n    }\n    catch (error) {\n        _log.error('__call error', error);\n        if (_popupManager) {\n            _popupManager.clear(false);\n        }\n        return (0, events_2.createErrorMessage)(error);\n    }\n};\nconst uiResponse = (response) => {\n    if (!iframe.instance) {\n        throw ERRORS.TypedError('Init_NotInitialized');\n    }\n    iframe.postMessage(response);\n};\nconst renderWebUSBButton = (className) => {\n    (0, button_1.default)(className, _settings.webusbSrc);\n};\nconst requestLogin = async (params) => {\n    if (typeof params.callback === 'function') {\n        const { callback } = params;\n        const loginChallengeListener = async (event) => {\n            const { data } = event;\n            if (data && data.type === events_2.UI.LOGIN_CHALLENGE_REQUEST) {\n                try {\n                    const payload = await callback();\n                    iframe.postMessage({\n                        type: events_2.UI.LOGIN_CHALLENGE_RESPONSE,\n                        payload,\n                    });\n                }\n                catch (error) {\n                    iframe.postMessage({\n                        type: events_2.UI.LOGIN_CHALLENGE_RESPONSE,\n                        payload: error.message,\n                    });\n                }\n            }\n        };\n        window.addEventListener('message', loginChallengeListener, false);\n        const response = await call(Object.assign(Object.assign({ method: 'requestLogin' }, params), { asyncChallenge: true, callback: null }));\n        window.removeEventListener('message', loginChallengeListener);\n        return response;\n    }\n    return call(Object.assign({ method: 'requestLogin' }, params));\n};\nconst disableWebUSB = () => {\n    if (!iframe.instance) {\n        throw ERRORS.TypedError('Init_NotInitialized');\n    }\n    iframe.postMessage({ type: events_2.TRANSPORT.DISABLE_WEBUSB });\n};\nconst requestWebUSBDevice = async () => {\n    try {\n        await window.navigator.usb.requestDevice({ filters: config_1.config.webusb });\n        iframe.postMessage({ type: events_2.TRANSPORT.REQUEST_DEVICE });\n    }\n    catch (_err) {\n    }\n};\nconst TrezorConnect = (0, factory_1.factory)({\n    eventEmitter,\n    manifest,\n    init,\n    call,\n    requestLogin,\n    uiResponse,\n    renderWebUSBButton,\n    disableWebUSB,\n    requestWebUSBDevice,\n    cancel,\n    dispose,\n});\nexports.default = TrezorConnect;\ntslib_1.__exportStar(require(\"@trezor/connect/lib/exports\"), exports);\n//# sourceMappingURL=index.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}