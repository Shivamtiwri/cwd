{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mergeDeepObject = void 0;\nconst isObject = obj => {\n  if (typeof obj === 'object' && obj !== null) {\n    if (typeof Object.getPrototypeOf === 'function') {\n      const prototype = Object.getPrototypeOf(obj);\n      return prototype === Object.prototype || prototype === null;\n    }\n    return Object.prototype.toString.call(obj) === '[object Object]';\n  }\n  return false;\n};\nconst mergeDeepObject = (...objects) => objects.reduce((result, current) => {\n  if (Array.isArray(current)) {\n    throw new TypeError('Arguments provided to ts-deepmerge must be objects, not arrays.');\n  }\n  Object.keys(current).forEach(key => {\n    if (['__proto__', 'constructor', 'prototype'].includes(key)) {\n      return;\n    }\n    if (Array.isArray(result[key]) && Array.isArray(current[key])) {\n      result[key] = exports.mergeDeepObject.options.mergeArrays ? Array.from(new Set(result[key].concat(current[key]))) : current[key];\n    } else if (isObject(result[key]) && isObject(current[key])) {\n      result[key] = (0, exports.mergeDeepObject)(result[key], current[key]);\n    } else {\n      result[key] = current[key];\n    }\n  });\n  return result;\n}, {});\nexports.mergeDeepObject = mergeDeepObject;\nconst defaultOptions = {\n  mergeArrays: true\n};\nexports.mergeDeepObject.options = defaultOptions;\nexports.mergeDeepObject.withOptions = (options, ...objects) => {\n  exports.mergeDeepObject.options = Object.assign({\n    mergeArrays: true\n  }, options);\n  const result = (0, exports.mergeDeepObject)(...objects);\n  exports.mergeDeepObject.options = defaultOptions;\n  return result;\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","mergeDeepObject","isObject","obj","getPrototypeOf","prototype","toString","call","objects","reduce","result","current","Array","isArray","TypeError","keys","forEach","key","includes","options","mergeArrays","from","Set","concat","defaultOptions","withOptions","assign"],"sources":["C:/Users/delll/Desktop/mini/node_modules/@trezor/utils/lib/mergeDeepObject.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mergeDeepObject = void 0;\nconst isObject = (obj) => {\n    if (typeof obj === 'object' && obj !== null) {\n        if (typeof Object.getPrototypeOf === 'function') {\n            const prototype = Object.getPrototypeOf(obj);\n            return prototype === Object.prototype || prototype === null;\n        }\n        return Object.prototype.toString.call(obj) === '[object Object]';\n    }\n    return false;\n};\nconst mergeDeepObject = (...objects) => objects.reduce((result, current) => {\n    if (Array.isArray(current)) {\n        throw new TypeError('Arguments provided to ts-deepmerge must be objects, not arrays.');\n    }\n    Object.keys(current).forEach(key => {\n        if (['__proto__', 'constructor', 'prototype'].includes(key)) {\n            return;\n        }\n        if (Array.isArray(result[key]) && Array.isArray(current[key])) {\n            result[key] = exports.mergeDeepObject.options.mergeArrays\n                ? Array.from(new Set(result[key].concat(current[key])))\n                : current[key];\n        }\n        else if (isObject(result[key]) && isObject(current[key])) {\n            result[key] = (0, exports.mergeDeepObject)(result[key], current[key]);\n        }\n        else {\n            result[key] = current[key];\n        }\n    });\n    return result;\n}, {});\nexports.mergeDeepObject = mergeDeepObject;\nconst defaultOptions = {\n    mergeArrays: true,\n};\nexports.mergeDeepObject.options = defaultOptions;\nexports.mergeDeepObject.withOptions = (options, ...objects) => {\n    exports.mergeDeepObject.options = Object.assign({ mergeArrays: true }, options);\n    const result = (0, exports.mergeDeepObject)(...objects);\n    exports.mergeDeepObject.options = defaultOptions;\n    return result;\n};\n//# sourceMappingURL=mergeDeepObject.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}